{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Hi Mike \u00b6 Hey nice - now let's start writing some documentation!","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#hi-mike","text":"Hey nice - now let's start writing some documentation!","title":"Hi Mike"},{"location":"Emmet/","text":"Emmet Commands \u00b6 HTML \u00b6 ! Will create a skeleton html page. ul>li\\*3#name$ < ul > < li id = \"name1\" ></ li > < li id = \"name2\" ></ li > < li id = \"name3\" ></ li > </ ul > CSS \u00b6 m10 margin : 10px ; p10 padding : 10px ; dn display : none ; React \u00b6 rcc Create a React class component rfc Create a stateless functional component impt inserts: import PropTypes from 'prop-types' Does not include the ending semi-colon; .item*3>label[for=\"dog$\"]{Dog }+input#dog }+input#dog < div className = \"item\" >< label htmlFor = \"dog1\" > Dog 1 </ label >< input type = \"text\" id = \"dog1\" /></ div > < div className = \"item\" >< label htmlFor = \"dog2\" > Dog 2 </ label >< input type = \"text\" id = \"dog2\" /></ div > < div className = \"item\" >< label htmlFor = \"dog3\" > Dog 3 </ label >< input type = \"text\" id = \"dog3\" /></ div > Javascript \u00b6 aja Will create a $.ajax({}) code block.","title":"Emmet Commands"},{"location":"Emmet/#emmet-commands","text":"","title":"Emmet Commands"},{"location":"Emmet/#html","text":"! Will create a skeleton html page. ul>li\\*3#name$ < ul > < li id = \"name1\" ></ li > < li id = \"name2\" ></ li > < li id = \"name3\" ></ li > </ ul >","title":"HTML"},{"location":"Emmet/#css","text":"m10 margin : 10px ; p10 padding : 10px ; dn display : none ;","title":"CSS"},{"location":"Emmet/#react","text":"rcc Create a React class component rfc Create a stateless functional component impt inserts: import PropTypes from 'prop-types' Does not include the ending semi-colon; .item*3>label[for=\"dog$\"]{Dog }+input#dog }+input#dog < div className = \"item\" >< label htmlFor = \"dog1\" > Dog 1 </ label >< input type = \"text\" id = \"dog1\" /></ div > < div className = \"item\" >< label htmlFor = \"dog2\" > Dog 2 </ label >< input type = \"text\" id = \"dog2\" /></ div > < div className = \"item\" >< label htmlFor = \"dog3\" > Dog 3 </ label >< input type = \"text\" id = \"dog3\" /></ div >","title":"React"},{"location":"Emmet/#javascript","text":"aja Will create a $.ajax({}) code block.","title":"Javascript"},{"location":"ImageTestDoc/","text":"Copy and Paste from clipboard \u00b6 did not name the doc or save or anything other than copy and paste Did that work ?","title":"Copy and Paste from clipboard"},{"location":"ImageTestDoc/#copy-and-paste-from-clipboard","text":"did not name the doc or save or anything other than copy and paste Did that work ?","title":"Copy and Paste from clipboard"},{"location":"MkDocs/","text":"MkDocs \u00b6 Static site generator used to build the MyDocs documentation site. Commit and push your changes first \u00b6 git add . git commit -m \"updated this doc\" git push origin master Deploy to GH Pages \u00b6 You must be in c:\\users\\jackie\\onedrive\\development\\docs\\ not ...docs\\docs\\ mkdocs gh-deploy Develop Your Site \u00b6 mkdocs serve Then open http://127.0.0.1:8000/ to see a live preview of your site. Create a New Documentation Project \u00b6 mkdocs new my-project cd my-project","title":"MkDocs"},{"location":"MkDocs/#mkdocs","text":"Static site generator used to build the MyDocs documentation site.","title":"MkDocs"},{"location":"MkDocs/#commit-and-push-your-changes-first","text":"git add . git commit -m \"updated this doc\" git push origin master","title":"Commit and push your changes first"},{"location":"MkDocs/#deploy-to-gh-pages","text":"You must be in c:\\users\\jackie\\onedrive\\development\\docs\\ not ...docs\\docs\\ mkdocs gh-deploy","title":"Deploy to GH Pages"},{"location":"MkDocs/#develop-your-site","text":"mkdocs serve Then open http://127.0.0.1:8000/ to see a live preview of your site.","title":"Develop Your Site"},{"location":"MkDocs/#create-a-new-documentation-project","text":"mkdocs new my-project cd my-project","title":"Create a New Documentation Project"},{"location":"RegEx/","text":"RegEx \u00b6 Characters \u00b6 Character Legend Example Sample Match \\d Most engines: one digit from 0 to 9 file_\\d\\d file_25 \\d .NET, Python 3: one Unicode digit in any script file_\\d\\d file_9\u0a69 \\w Most engines: \"word character\": ASCII letter, digit or underscore \\w-\\w\\w\\w A-b_1 \\w .Python 3: \"word character\": Unicode letter, ideogram, digit, or underscore \\w-\\w\\w\\w \u5b57-\u307e_\u06f3 \\w .NET: \"word character\": Unicode letter, ideogram, digit, or connector \\w-\\w\\w\\w \u5b57-\u307e\u203f\u06f3 \\s Most engines: \"whitespace character\": space, tab, newline, carriage return, vertical tab a\\sb\\sc a b c \\s .NET, Python 3, JavaScript: \"whitespace character\": any Unicode separator a\\sb\\sc a b c \\D One character that is not a digit as defined by your engine's \\d \\D\\D\\D ABC \\W One character that is not a word character as defined by your engine's \\w \\W\\W\\W\\W\\W *-+=) \\S One character that is not a whitespace character as defined by your engine's \\s \\S\\S\\S\\S Yoyo Quantifiers \u00b6 Quantifier Legend Example Sample Match + One or more Version \\w-\\w+ Version A-b1_1 {3} Exactly three times \\D{3} ABC {2,4} Two to four times \\d{2,4} 156 {3,} Three or more times \\w{3,} regex_tutorial * Zero or more times A*B*C* AAACC ? Once or none plurals? plural More Characters \u00b6 Character Legend Example Sample Match . Any character except line break a.c abc . Any character except line break .* whatever, man. * .* A period (special character: needs to be escaped by a ) a.c a.c \\ Escapes a special character .*+\\? $^\\/\\ .*+? $^/\\ \\ Escapes a special character [{()}] [{()}] Logic \u00b6 Logic Legend Example Sample Match | Alternation / OR operand 22|33 33 ( \u2026 ) Capturing group A(nt|pple) Apple (captures \"pple\") \\1 Contents of Group 1 r(\\w)g\\1x regex \\2 Contents of Group 2 (\\d\\d)+(\\d\\d)=\\2+\\1 12+65=65+12 (?: \u2026 ) Non-capturing group A(?:nt|pple) Apple More White-Space \u00b6 Character Legend Example Sample Match \\t Tab T\\t\\w{2} T ab \\r Carriage return character see below \\n Line feed character see below \\r\\n Line separator on Windows AB\\r\\nCD AB CD \\N Perl, PCRE (C, PHP, R\u2026): one character that is not a line break \\N+ ABC \\h Perl, PCRE (C, PHP, R\u2026), Java: one horizontal whitespace character: tab or Unicode space separator \\H One character that is not a horizontal whitespace \\v .NET, JavaScript, Python, Ruby: vertical tab \\v Perl, PCRE (C, PHP, R\u2026), Java: one vertical whitespace character: line feed, carriage return, vertical tab, form feed, paragraph or line separator \\V Perl, PCRE (C, PHP, R\u2026), Java: any character that is not a vertical whitespace \\R Perl, PCRE (C, PHP, R\u2026), Java: one line break (carriage return + line feed pair, and all the characters matched by \\v) More Quantifiers \u00b6 Quantifier Legend Example Sample Match + The + (one or more) is \"greedy\" \\d+ 12345 ? Makes quantifiers \"lazy\" \\d+? 1 in **1**2345 * The * (zero or more) is \"greedy\" A* AAA ? Makes quantifiers \"lazy\" A*? empty in AAA {2,4} Two to four times, \"greedy\" \\w{2,4} abcd ? Makes quantifiers \"lazy\" \\w{2,4}? ab in **ab**cd Character Classes \u00b6 Character Legend Example Sample Match [ \u2026 ] One of the characters in the brackets [AEIOU] One uppercase vowel [ \u2026 ] One of the characters in the brackets T[ao]p Tap or Top - Range indicator [a-z] One lowercase letter [x-y] One of the characters in the range from x to y [A-Z]+ GREAT [ \u2026 ] One of the characters in the brackets [AB1-5w-z] One of either: A,B,1,2,3,4,5,w,x,y,z [x-y] One of the characters in the range from x to y [\u2002-~]+ Characters in the printable section of the ASCII table . [^x] One character that is not x [^a-z]{3} A1! [^x-y] One of the characters not in the range from x to y [^\u2002-~]+ Characters that are not in the printable section of the ASCII table . [\\d\\D] One character that is a digit or a non-digit [\\d\\D]+ Any characters, inc- luding new lines, which the regular dot doesn't match [\\x41] Matches the character at hexadecimal position 41 in the ASCII table, i.e. A [\\x41-\\x45]{3} ABE Anchors and Boundaries \u00b6 Anchor Legend Example Sample Match ^ Start of string or start of line depending on multiline mode. (But when [^inside brackets], it means \"not\") ^abc .* abc (line start) $ End of string or end of line depending on multiline mode. Many engine-dependent subtleties. .*? the end$ this is the end \\A Beginning of string (all major engines except JS) \\Aabc[\\d\\D]* abc (string... ...start) \\z Very end of the string Not available in Python and JS the end\\z this is...\\n... the end \\Z End of string or (except Python) before final line break Not available in JS the end\\Z this is...\\n... the end \\n \\G Beginning of String or End of Previous Match .NET, Java, PCRE (C, PHP, R\u2026), Perl, Ruby \\b Word boundary Most engines: position where one side only is an ASCII letter, digit or underscore Bob.*\\bcat\\b Bob ate the cat \\b Word boundary .NET, Java, Python 3, Ruby: position where one side only is a Unicode letter, digit or underscore Bob.*\\b\\\u043a\u043e\u0448\u043a\u0430\\b Bob ate the \u043a\u043e\u0448\u043a\u0430 \\B Not a word boundary c. \\Bcat\\B. copycats Lookarounds \u00b6 Lookaround Legend Example Sample Match (?=\u2026) Positive lookahead (?=\\d{10})\\d{5} 01234 in **01234**56789 (?<=\u2026) Positive lookbehind (?<=\\d)cat cat in 1**cat** (?!\u2026) Negative lookahead (?!theatre)the\\w+ theme (?<!\u2026) Negative lookbehind \\w{3}(?<!mon)ster Munster Character Class Operations \u00b6 Class Operation Legend Example Sample Match [\u2026-[\u2026]] .NET: character class subtraction. One character that is in those on the left, but not in the subtracted class. [a-z-[aeiou]] Any lowercase consonant [\u2026-[\u2026]] .NET: character class subtraction. [\\p{IsArabic}-[\\D]] An Arabic character that is not a non-digit, i.e., an Arabic digit [\u2026&&[\u2026]] Java, Ruby 2+: character class intersection. One character that is both in those on the left and in the && class. [\\S&&[\\D]] An non-whitespace character that is a non-digit. [\u2026&&[\u2026]] Java, Ruby 2+: character class intersection. [\\S&&[\\D]&&[^a-zA-Z]] An non-whitespace character that a non-digit and not a letter. [\u2026&&[^\u2026]] Java, Ruby 2+: character class subtraction is obtained by intersecting a class with a negated class [a-z&&[^aeiou]] An English lowercase letter that is not a vowel. [\u2026&&[^\u2026]] Java, Ruby 2+: character class subtraction [\\p{InArabic}&&[^\\p{L}\\p{N}]] An Arabic character that is not a letter or a number","title":"RegEx"},{"location":"RegEx/#regex","text":"","title":"RegEx"},{"location":"RegEx/#characters","text":"Character Legend Example Sample Match \\d Most engines: one digit from 0 to 9 file_\\d\\d file_25 \\d .NET, Python 3: one Unicode digit in any script file_\\d\\d file_9\u0a69 \\w Most engines: \"word character\": ASCII letter, digit or underscore \\w-\\w\\w\\w A-b_1 \\w .Python 3: \"word character\": Unicode letter, ideogram, digit, or underscore \\w-\\w\\w\\w \u5b57-\u307e_\u06f3 \\w .NET: \"word character\": Unicode letter, ideogram, digit, or connector \\w-\\w\\w\\w \u5b57-\u307e\u203f\u06f3 \\s Most engines: \"whitespace character\": space, tab, newline, carriage return, vertical tab a\\sb\\sc a b c \\s .NET, Python 3, JavaScript: \"whitespace character\": any Unicode separator a\\sb\\sc a b c \\D One character that is not a digit as defined by your engine's \\d \\D\\D\\D ABC \\W One character that is not a word character as defined by your engine's \\w \\W\\W\\W\\W\\W *-+=) \\S One character that is not a whitespace character as defined by your engine's \\s \\S\\S\\S\\S Yoyo","title":"Characters"},{"location":"RegEx/#quantifiers","text":"Quantifier Legend Example Sample Match + One or more Version \\w-\\w+ Version A-b1_1 {3} Exactly three times \\D{3} ABC {2,4} Two to four times \\d{2,4} 156 {3,} Three or more times \\w{3,} regex_tutorial * Zero or more times A*B*C* AAACC ? Once or none plurals? plural","title":"Quantifiers"},{"location":"RegEx/#more-characters","text":"Character Legend Example Sample Match . Any character except line break a.c abc . Any character except line break .* whatever, man. * .* A period (special character: needs to be escaped by a ) a.c a.c \\ Escapes a special character .*+\\? $^\\/\\ .*+? $^/\\ \\ Escapes a special character [{()}] [{()}]","title":"More Characters"},{"location":"RegEx/#logic","text":"Logic Legend Example Sample Match | Alternation / OR operand 22|33 33 ( \u2026 ) Capturing group A(nt|pple) Apple (captures \"pple\") \\1 Contents of Group 1 r(\\w)g\\1x regex \\2 Contents of Group 2 (\\d\\d)+(\\d\\d)=\\2+\\1 12+65=65+12 (?: \u2026 ) Non-capturing group A(?:nt|pple) Apple","title":"Logic"},{"location":"RegEx/#more-white-space","text":"Character Legend Example Sample Match \\t Tab T\\t\\w{2} T ab \\r Carriage return character see below \\n Line feed character see below \\r\\n Line separator on Windows AB\\r\\nCD AB CD \\N Perl, PCRE (C, PHP, R\u2026): one character that is not a line break \\N+ ABC \\h Perl, PCRE (C, PHP, R\u2026), Java: one horizontal whitespace character: tab or Unicode space separator \\H One character that is not a horizontal whitespace \\v .NET, JavaScript, Python, Ruby: vertical tab \\v Perl, PCRE (C, PHP, R\u2026), Java: one vertical whitespace character: line feed, carriage return, vertical tab, form feed, paragraph or line separator \\V Perl, PCRE (C, PHP, R\u2026), Java: any character that is not a vertical whitespace \\R Perl, PCRE (C, PHP, R\u2026), Java: one line break (carriage return + line feed pair, and all the characters matched by \\v)","title":"More White-Space"},{"location":"RegEx/#more-quantifiers","text":"Quantifier Legend Example Sample Match + The + (one or more) is \"greedy\" \\d+ 12345 ? Makes quantifiers \"lazy\" \\d+? 1 in **1**2345 * The * (zero or more) is \"greedy\" A* AAA ? Makes quantifiers \"lazy\" A*? empty in AAA {2,4} Two to four times, \"greedy\" \\w{2,4} abcd ? Makes quantifiers \"lazy\" \\w{2,4}? ab in **ab**cd","title":"More Quantifiers"},{"location":"RegEx/#character-classes","text":"Character Legend Example Sample Match [ \u2026 ] One of the characters in the brackets [AEIOU] One uppercase vowel [ \u2026 ] One of the characters in the brackets T[ao]p Tap or Top - Range indicator [a-z] One lowercase letter [x-y] One of the characters in the range from x to y [A-Z]+ GREAT [ \u2026 ] One of the characters in the brackets [AB1-5w-z] One of either: A,B,1,2,3,4,5,w,x,y,z [x-y] One of the characters in the range from x to y [\u2002-~]+ Characters in the printable section of the ASCII table . [^x] One character that is not x [^a-z]{3} A1! [^x-y] One of the characters not in the range from x to y [^\u2002-~]+ Characters that are not in the printable section of the ASCII table . [\\d\\D] One character that is a digit or a non-digit [\\d\\D]+ Any characters, inc- luding new lines, which the regular dot doesn't match [\\x41] Matches the character at hexadecimal position 41 in the ASCII table, i.e. A [\\x41-\\x45]{3} ABE","title":"Character Classes"},{"location":"RegEx/#anchors-and-boundaries","text":"Anchor Legend Example Sample Match ^ Start of string or start of line depending on multiline mode. (But when [^inside brackets], it means \"not\") ^abc .* abc (line start) $ End of string or end of line depending on multiline mode. Many engine-dependent subtleties. .*? the end$ this is the end \\A Beginning of string (all major engines except JS) \\Aabc[\\d\\D]* abc (string... ...start) \\z Very end of the string Not available in Python and JS the end\\z this is...\\n... the end \\Z End of string or (except Python) before final line break Not available in JS the end\\Z this is...\\n... the end \\n \\G Beginning of String or End of Previous Match .NET, Java, PCRE (C, PHP, R\u2026), Perl, Ruby \\b Word boundary Most engines: position where one side only is an ASCII letter, digit or underscore Bob.*\\bcat\\b Bob ate the cat \\b Word boundary .NET, Java, Python 3, Ruby: position where one side only is a Unicode letter, digit or underscore Bob.*\\b\\\u043a\u043e\u0448\u043a\u0430\\b Bob ate the \u043a\u043e\u0448\u043a\u0430 \\B Not a word boundary c. \\Bcat\\B. copycats","title":"Anchors and Boundaries"},{"location":"RegEx/#lookarounds","text":"Lookaround Legend Example Sample Match (?=\u2026) Positive lookahead (?=\\d{10})\\d{5} 01234 in **01234**56789 (?<=\u2026) Positive lookbehind (?<=\\d)cat cat in 1**cat** (?!\u2026) Negative lookahead (?!theatre)the\\w+ theme (?<!\u2026) Negative lookbehind \\w{3}(?<!mon)ster Munster","title":"Lookarounds"},{"location":"RegEx/#character-class-operations","text":"Class Operation Legend Example Sample Match [\u2026-[\u2026]] .NET: character class subtraction. One character that is in those on the left, but not in the subtracted class. [a-z-[aeiou]] Any lowercase consonant [\u2026-[\u2026]] .NET: character class subtraction. [\\p{IsArabic}-[\\D]] An Arabic character that is not a non-digit, i.e., an Arabic digit [\u2026&&[\u2026]] Java, Ruby 2+: character class intersection. One character that is both in those on the left and in the && class. [\\S&&[\\D]] An non-whitespace character that is a non-digit. [\u2026&&[\u2026]] Java, Ruby 2+: character class intersection. [\\S&&[\\D]&&[^a-zA-Z]] An non-whitespace character that a non-digit and not a letter. [\u2026&&[^\u2026]] Java, Ruby 2+: character class subtraction is obtained by intersecting a class with a negated class [a-z&&[^aeiou]] An English lowercase letter that is not a vowel. [\u2026&&[^\u2026]] Java, Ruby 2+: character class subtraction [\\p{InArabic}&&[^\\p{L}\\p{N}]] An Arabic character that is not a letter or a number","title":"Character Class Operations"},{"location":"React/ControlledInput/","text":"Controlled Input \u00b6 The standard method for dealing with input fields is to use a 'controlled input.' A controlled input is one in which the onChange event grabs the input, stores it to state then rerenders the component with the new value. Probably better with an example. Uncontrolled Input \u00b6 This is not recommended in React. Class SearchBar extends React . Component { onInputChange ( e ) { console . log ( e . target . value ); } render () { return ( < div > < form > < div > < label > Image Search < /label> < input type = \"text\" onChange = { this . onInputChange } /> < /div> < /form> < /div> ); } } Controlled Input \u00b6 The recommended method: Class SearchBar extends React . Component { constructor ( props ) { super ( props ); this . state = { term : '' }; } render () { return ( < div > < form > < div > < label > Image Search < /label> < input type = \"text\" value = { this . state . term } onChange = { e => this . setState ({ term : e . target . value }) } /> < /div> < /form> < /div> ); } } You could obviously still have the onChange call a separately defined method if needed. ... onInputChange = ( e ) => { // use an arrow function or bind 'this' in the constructor console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange } /> ... With bind in the constructor constructor ( props ) { super ( props ); this . onInputChange = this . onInputChange . bind ( this ); } onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange } /> ... With an arrow function in the call onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = {( e ) => this . onInputChange ( e )} /> ... You can bind in line also but not considered a best practice ... onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange . bind ( this )} /> ...","title":"Controlled Input"},{"location":"React/ControlledInput/#controlled-input","text":"The standard method for dealing with input fields is to use a 'controlled input.' A controlled input is one in which the onChange event grabs the input, stores it to state then rerenders the component with the new value. Probably better with an example.","title":"Controlled Input"},{"location":"React/ControlledInput/#uncontrolled-input","text":"This is not recommended in React. Class SearchBar extends React . Component { onInputChange ( e ) { console . log ( e . target . value ); } render () { return ( < div > < form > < div > < label > Image Search < /label> < input type = \"text\" onChange = { this . onInputChange } /> < /div> < /form> < /div> ); } }","title":"Uncontrolled Input"},{"location":"React/ControlledInput/#controlled-input_1","text":"The recommended method: Class SearchBar extends React . Component { constructor ( props ) { super ( props ); this . state = { term : '' }; } render () { return ( < div > < form > < div > < label > Image Search < /label> < input type = \"text\" value = { this . state . term } onChange = { e => this . setState ({ term : e . target . value }) } /> < /div> < /form> < /div> ); } } You could obviously still have the onChange call a separately defined method if needed. ... onInputChange = ( e ) => { // use an arrow function or bind 'this' in the constructor console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange } /> ... With bind in the constructor constructor ( props ) { super ( props ); this . onInputChange = this . onInputChange . bind ( this ); } onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange } /> ... With an arrow function in the call onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = {( e ) => this . onInputChange ( e )} /> ... You can bind in line also but not considered a best practice ... onInputChange ( e ) { console . log ( e . target . value ); } ... < input type = \"text\" value = { this . state . term } onChange = { this . onInputChange . bind ( this )} /> ...","title":"Controlled Input"},{"location":"React/DocWorkFlowSettings/","text":"Documentation Work Flow Settings \u00b6 Set the When Insert Local Image> check the option Set the Global Image Settings... as follows:","title":"Documentation Work Flow Settings"},{"location":"React/DocWorkFlowSettings/#documentation-work-flow-settings","text":"Set the When Insert Local Image> check the option Set the Global Image Settings... as follows:","title":"Documentation Work Flow Settings"},{"location":"React/SubFile/","text":"test of file in sub folder \u00b6 Set the When Insert Local Image> check the option Set the Global Image Settings... as follows:","title":"test of file in sub folder"},{"location":"React/SubFile/#test-of-file-in-sub-folder","text":"Set the When Insert Local Image> check the option Set the Global Image Settings... as follows:","title":"test of file in sub folder"},{"location":"React/SubSub/ImageTestDocInSubSub/","text":"Copy and Paste from clipboard \u00b6 did not name the doc or save or anything other than copy and paste just a subsub document with no images Did that work ?","title":"Copy and Paste from clipboard"},{"location":"React/SubSub/ImageTestDocInSubSub/#copy-and-paste-from-clipboard","text":"did not name the doc or save or anything other than copy and paste just a subsub document with no images Did that work ?","title":"Copy and Paste from clipboard"}]}